buildscript {
    ext.agp_version = '8.2.0'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${agp_version}"
        classpath 'io.github.emakryo.rust-android-gradle:rust-android:+'
    }
}

plugins {
  id("com.dorongold.task-tree") version "2.1.1"
}

apply plugin: 'com.android.application'
apply plugin: 'io.github.emakryo.rust-android-gradle.rust-android'

android {
    namespace "com.nishtahir.androidrust"
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.nishtahir.androidrust"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildFeatures.buildConfig true
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "feature"
    productFlavors {
        base {
            dimension "feature"
            buildConfigField "String", "FEATURES", "\"foo\""
        }
        all {
            dimension "feature"
            buildConfigField "String", "FEATURES", "\"foobar\""
        }
        noDefaultButBar {
            dimension "feature"
            buildConfigField "String", "FEATURES", "\"bar\""
        }
        defaultAndBar {
            dimension "feature"
            buildConfigField "String", "FEATURES", "\"foobar\""
        }
    }
    ndkVersion '26.1.10909125'
}

def arch = System.getProperty('os.arch')
def os = System.getProperty('os.name').toLowerCase()

cargo {
    module = "../rust"
    if (arch == "aarch64" && os.contains("mac os x")) {
        targets = ["arm64", "darwin-aarch64"]
    } else if ((arch == "x86_64" || arch == "amd64") && os.contains("mac os x")) {
        targets = ["arm64", "darwin-x86-64"]
    } else if ((arch == "x86_64" || arch == "amd64") && os.contains("linux")) {
        targets = ["arm64", "linux-x86-64"]
    } else if ((arch == "x86_64" || arch == "amd64") && os.contains("windows")) {
        targets = ["arm64", "win32-x86-64-msvc"]
    } else {
        throw new GradleException("Unsupported platform: arch=$arch, os=$os")
    }
    libname = "rust"

    productFlavors {
        base {
            targetDirectory "../rust/targets/base"
        }
        all {
            features { spec ->
                spec.all()
            }
            targetDirectory "../rust/targets/all"
        }
        noDefaultButBar {
            features { spec ->
                spec.noDefaultBut "bar"
            }
            targetDirectory "../rust/targets/noDefaultButBar"
        }
        defaultAndBar {
            features { spec ->
                spec.defaultAnd "bar"
            }
            targetDirectory "../rust/targets/defaultAndBar"
        }
    }
}

repositories {
    google()
    mavenCentral {
        metadataSources {
            // This is required to resolve the JNA dependency correctly.
            artifact()
            mavenPom()
        }
    }
}

configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {
    jnaForTest "net.java.dev.jna:jna:5.14.0@jar"
    implementation "net.java.dev.jna:jna:5.14.0@aar"

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'

    // For reasons unknown, resolving the jnaForTest configuration directly
    // trips a nasty issue with the Android-Gradle plugin 3.2.1, like `Cannot
    // change attributes of configuration ':PROJECT:kapt' after it has been
    // resolved`.  I think that the configuration is being made a
    // super-configuration of the testImplementation and then the `.files` is
    // causing it to be resolved.  Cloning first dissociates the configuration,
    // avoiding other configurations from being resolved.  Tricky!
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    // testImplementation "androidx.test.ext:junit:$versions.androidx_junit"
    testImplementation "org.robolectric:robolectric:4.11.1"
}

// TODO: Remove this when the plugin supports this.
android.applicationVariants.all { variant ->
    def capitalizedVariantName = "${variant.name.capitalize()}"

    // Don't merge the jni lib folders until after the Rust libraries have been built.
    tasks.named("merge${capitalizedVariantName}JniLibFolders") {
        dependsOn "cargoBuildAndroid${capitalizedVariantName}"
    }

    // For unit tests.
    tasks.named("process${capitalizedVariantName}UnitTestJavaRes") {
        dependsOn "cargoBuildDesktop${capitalizedVariantName}"
    }

    // Hacky sync of the Rust JNI libraries to the Java resources for unit tests
    // since process*JavaRes doesn't sync the JNI libraries (.so files).
    if (os.contains("linux")) {
        def sync = tasks.register("sync${capitalizedVariantName}RustJniLibToJavaRes", Sync) {
            from tasks.named("cargoBuildDesktop${capitalizedVariantName}").get().property("outDir")
            into file("$buildDir/intermediates/java_res/${variant.name}UnitTest/out")
            dependsOn "cargoBuildDesktop${capitalizedVariantName}"
            dependsOn "process${capitalizedVariantName}UnitTestJavaRes"
        }
        tasks.named("test${capitalizedVariantName}UnitTest") {
            dependsOn sync
        }
    }
}
